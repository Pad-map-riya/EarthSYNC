Package. Js
{
  "name": "space-climate-watch",
  "version": "1.0.0",
  "description": "Connecting Space Data to Life on Earth",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "axios": "^1.6.0",
    "dotenv": "^16.3.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}



,Server. Js
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// Serve frontend
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Weather API endpoint
app.get('/api/weather', async (req, res) => {
    try {
        const city = req.query.city || 'New York';
        const apiKey = process.env.OPENWEATHER_API_KEY;
        
        if (!apiKey) {
            return res.json({
                success: true,
                data: getSampleWeatherData(city)
            });
        }

        const response = await axios.get(
            `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`
        );
        
        res.json({
            success: true,
            data: response.data
        });
    } catch (error) {
        console.error('Weather API error:', error.message);
        res.json({
            success: true,
            data: getSampleWeatherData(req.query.city || 'New York')
        });
    }
});

// NASA API endpoint for stories
app.get('/api/nasa-stories', async (req, res) => {
    try {
        const apiKey = process.env.NASA_API_KEY;
        
        if (!apiKey) {
            return res.json({
                success: true,
                data: getSampleNASAStories()
            });
        }

        // Using NASA's Image and Video Library API
        const response = await axios.get(
            `https://images-api.nasa.gov/search?q=climate&media_type=image`
        );
        
        const stories = response.data.collection.items.slice(0, 6).map(item => ({
            title: item.data[0].title,
            description: item.data[0].description || 'NASA mission and research story',
            image: item.links[0].href,
            date: item.data[0].date_created.split('T')[0]
        }));
        
        res.json({
            success: true,
            data: stories
        });
    } catch (error) {
        console.error('NASA API error:', error.message);
        res.json({
            success: true,
            data: getSampleNASAStories()
        });
    }
});

// Satellite data endpoint
app.get('/api/satellite-data', async (req, res) => {
    try {
        const { type, location } = req.query;
        
        // This would integrate with actual satellite data APIs
        // For demo purposes, returning sample data
        res.json({
            success: true,
            data: getSampleSatelliteData(type, location)
        });
    } catch (error) {
        console.error('Satellite data error:', error);
        res.json({
            success: false,
            error: 'Failed to fetch satellite data'
        });
    }
});

// Climate indicators endpoint
app.get('/api/climate-indicators', (req, res) => {
    res.json({
        success: true,
        data: {
            seaLevelRise: 75,
            globalTemperature: 85,
            arcticIceMelt: 65,
            co2Concentration: 90
        }
    });
});

// Sample data functions
function getSampleWeatherData(city) {
    const sampleData = {
        'New York': {
            name: 'New York',
            sys: { country: 'US' },
            weather: [{ description: 'clear sky', icon: '01d' }],
            main: { temp: 22, humidity: 65, pressure: 1015 },
            wind: { speed: 3.5 }
        },
        'London': {
            name: 'London',
            sys: { country: 'GB' },
            weather: [{ description: 'light rain', icon: '10d' }],
            main: { temp: 15, humidity: 80, pressure: 1012 },
            wind: { speed: 4.2 }
        },
        'Tokyo': {
            name: 'Tokyo',
            sys: { country: 'JP' },
            weather: [{ description: 'cloudy', icon: '04d' }],
            main: { temp: 18, humidity: 70, pressure: 1013 },
            wind: { speed: 2.8 }
        }
    };
    
    return sampleData[city] || sampleData['New York'];
}

function getSampleNASAStories() {
    return [
        {
            title: "James Webb Space Telescope Discoveries",
            description: "Revolutionizing our understanding of the universe with unprecedented infrared capabilities, discovering early galaxies and studying exoplanet atmospheres.",
            image: "https://images.unsplash.com/photo-1642784353723-4ec18d661147?w=500",
            date: "2024-01-15"
        },
        {
            title: "Mars Perseverance Rover Mission",
            description: "Exploring Jezero Crater, collecting rock samples, and testing technologies for future human exploration of Mars.",
            image: "https://images.unsplash.com/photo-1614728894747-3ec1b7c4c817?w=500",
            date: "2024-01-12"
        },
        {
            title: "Climate Change Satellite Monitoring",
            description: "NASA's fleet of Earth-observing satellites provide crucial data on climate patterns, sea level rise, and environmental changes.",
            image: "https://images.unsplash.com/photo-1569163139394-de44cb54d5c8?w=500",
            date: "2024-01-10"
        },
        {
            title: "International Space Station Research",
            description: "Conducting microgravity experiments that benefit life on Earth and prepare for future deep space missions.",
            image: "https://images.unsplash.com/photo-1446776653964-20c1d3a81b06?w=500",
            date: "2024-01-08"
        },
        {
            title: "Artemis Moon Mission Program",
            description: "Preparing to return humans to the Moon and establish sustainable exploration for future Mars missions.",
            image: "https://images.unsplash.com/photo-1446776877081-d282a0f896e2?w=500",
            date: "2024-01-05"
        },
        {
            title: "Solar Dynamics Observatory",
            description: "Monitoring solar activity and space weather that affects Earth's technological systems.",
            image: "https://images.unsplash.com/photo-1614642264769-d8f123e7a6d3?w=500",
            date: "2024-01-03"
        }
    ];
}

function getSampleSatelliteData(type, location) {
    const sampleData = {
        hurricane: {
            before: 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=500',
            after: 'https://images.unsplash.com/photo-1506973035030-6b1b7b5b0b0f?w=500',
            analysis: 'Significant vegetation loss and infrastructure damage detected'
        },
        wildfire: {
            before: 'https://images.unsplash.com/photo-1560032779-0a8809186ef7?w=500',
            after: 'https://images.unsplash.com/photo-1560032779-0a8809186ef7?w=500',
            analysis: 'Over 50,000 acres affected, smoke plume visible from space'
        },
        flood: {
            before: 'https://images.unsplash.com/photo-1582213781892-5a62719a6e7a?w=500',
            after: 'https://images.unsplash.com/photo-1582213781892-5a62719a6e7a?w=500',
            analysis: 'Widespread flooding detected, water levels 3m above normal'
        }
    };
    
    return sampleData[type] || sampleData.hurricane;
}

// Start server
app.listen(PORT, () => {
    console.log(`Space & Climate Watch server running on port ${PORT}`);
    console.log(`Visit: http://localhost:${PORT}`);
});const express = require('express');
const cors = require('cors');
const axios = require('axios');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// Serve frontend
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Weather API endpoint
app.get('/api/weather', async (req, res) => {
    try {
        const city = req.query.city || 'New York';
        const apiKey = process.env.OPENWEATHER_API_KEY;
        
        if (!apiKey) {
            return res.json({
                success: true,
                data: getSampleWeatherData(city)
            });
        }

        const response = await axios.get(
            `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`
        );
        
        res.json({
            success: true,
            data: response.data
        });
    } catch (error) {
        console.error('Weather API error:', error.message);
        res.json({
            success: true,
            data: getSampleWeatherData(req.query.city || 'New York')
        });
    }
});

// NASA API endpoint for stories
app.get('/api/nasa-stories', async (req, res) => {
    try {
        const apiKey = process.env.NASA_API_KEY;
        
        if (!apiKey) {
            return res.json({
                success: true,
                data: getSampleNASAStories()
            });
        }

        // Using NASA's Image and Video Library API
        const response = await axios.get(
            `https://images-api.nasa.gov/search?q=climate&media_type=image`
        );
        
        const stories = response.data.collection.items.slice(0, 6).map(item => ({
            title: item.data[0].title,
            description: item.data[0].description || 'NASA mission and research story',
            image: item.links[0].href,
            date: item.data[0].date_created.split('T')[0]
        }));
        
        res.json({
            success: true,
            data: stories
        });
    } catch (error) {
        console.error('NASA API error:', error.message);
        res.json({
            success: true,
            data: getSampleNASAStories()
        });
    }
});

// Satellite data endpoint
app.get('/api/satellite-data', async (req, res) => {
    try {
        const { type, location } = req.query;
        
        // This would integrate with actual satellite data APIs
        // For demo purposes, returning sample data
        res.json({
            success: true,
            data: getSampleSatelliteData(type, location)
        });
    } catch (error) {
        console.error('Satellite data error:', error);
        res.json({
            success: false,
            error: 'Failed to fetch satellite data'
        });
    }
});

// Climate indicators endpoint
app.get('/api/climate-indicators', (req, res) => {
    res.json({
        success: true,
        data: {
            seaLevelRise: 75,
            globalTemperature: 85,
            arcticIceMelt: 65,
            co2Concentration: 90
        }
    });
});

// Sample data functions
function getSampleWeatherData(city) {
    const sampleData = {
        'New York': {
            name: 'New York',
            sys: { country: 'US' },
            weather: [{ description: 'clear sky', icon: '01d' }],
            main: { temp: 22, humidity: 65, pressure: 1015 },
            wind: { speed: 3.5 }
        },
        'London': {
            name: 'London',
            sys: { country: 'GB' },
            weather: [{ description: 'light rain', icon: '10d' }],
            main: { temp: 15, humidity: 80, pressure: 1012 },
            wind: { speed: 4.2 }
        },
        'Tokyo': {
            name: 'Tokyo',
            sys: { country: 'JP' },
            weather: [{ description: 'cloudy', icon: '04d' }],
            main: { temp: 18, humidity: 70, pressure: 1013 },
            wind: { speed: 2.8 }
        }
    };
    
    return sampleData[city] || sampleData['New York'];
}

function getSampleNASAStories() {
    return [
        {
            title: "James Webb Space Telescope Discoveries",
            description: "Revolutionizing our understanding of the universe with unprecedented infrared capabilities, discovering early galaxies and studying exoplanet atmospheres.",
            image: "https://images.unsplash.com/photo-1642784353723-4ec18d661147?w=500",
            date: "2024-01-15"
        },
        {
            title: "Mars Perseverance Rover Mission",
            description: "Exploring Jezero Crater, collecting rock samples, and testing technologies for future human exploration of Mars.",
            image: "https://images.unsplash.com/photo-1614728894747-3ec1b7c4c817?w=500",
            date: "2024-01-12"
        },
        {
            title: "Climate Change Satellite Monitoring",
            description: "NASA's fleet of Earth-observing satellites provide crucial data on climate patterns, sea level rise, and environmental changes.",
            image: "https://images.unsplash.com/photo-1569163139394-de44cb54d5c8?w=500",
            date: "2024-01-10"
        },
        {
            title: "International Space Station Research",
            description: "Conducting microgravity experiments that benefit life on Earth and prepare for future deep space missions.",
            image: "https://images.unsplash.com/photo-1446776653964-20c1d3a81b06?w=500",
            date: "2024-01-08"
        },
        {
            title: "Artemis Moon Mission Program",
            description: "Preparing to return humans to the Moon and establish sustainable exploration for future Mars missions.",
            image: "https://images.unsplash.com/photo-1446776877081-d282a0f896e2?w=500",
            date: "2024-01-05"
        },
        {
            title: "Solar Dynamics Observatory",
            description: "Monitoring solar activity and space weather that affects Earth's technological systems.",
            image: "https://images.unsplash.com/photo-1614642264769-d8f123e7a6d3?w=500",
            date: "2024-01-03"
        }
    ];
}

function getSampleSatelliteData(type, location) {
    const sampleData = {
        hurricane: {
            before: 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=500',
            after: 'https://images.unsplash.com/photo-1506973035030-6b1b7b5b0b0f?w=500',
            analysis: 'Significant vegetation loss and infrastructure damage detected'
        },
        wildfire: {
            before: 'https://images.unsplash.com/photo-1560032779-0a8809186ef7?w=500',
            after: 'https://images.unsplash.com/photo-1560032779-0a8809186ef7?w=500',
            analysis: 'Over 50,000 acres affected, smoke plume visible from space'
        },
        flood: {
            before: 'https://images.unsplash.com/photo-1582213781892-5a62719a6e7a?w=500',
            after: 'https://images.unsplash.com/photo-1582213781892-5a62719a6e7a?w=500',
            analysis: 'Widespread flooding detected, water levels 3m above normal'
        }
    };
    
    return sampleData[type] || sampleData.hurricane;
}

// Start server
app.listen(PORT, () => {
    console.log(`Space & Climate Watch server running on port ${PORT}`);
    console.log(`Visit: http://localhost:${PORT}`);
});

Environment configuration.( env )
# API Keys (Get these from respective services)
OPENWEATHER_API_KEY=your_openweather_api_key_here
NASA_API_KEY=your_nasa_api_key_here

# Server Configuration
PORT=3000
NODE_ENV=development
